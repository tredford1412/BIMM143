---
title: "R functions"
author: "Hugh Redford (PID:A17067426)"
format: pdf
---

Today we will get more exposure to funcitons in R. We call functions to do all our work and today wew will learn how to write our own

## A first silly function

Note that arguments 2 and 3 have default values (because we set y = 0 and z = 0), so we do not have to supply them when we call our function. 
```{r}
add <- function (x,y=0,z=0) {
  x + y + z
}
```

Can I just use this

```{r}
add (1,1)
add(1, y = c(10,100))
```

```{r}
add(100)
```
```{r}
add(100, 1, 1)
```


## A second more fun function

Let's write a function that generates nucleotide sequences.

We can make use of the in-built `sample()` function in R to help us here.

```{r}
sample(x= 1:10, size = 9)
```

```{r}
sample(x = 1:10 , size = 11, replace = TRUE)
```

> Q: Can you use `sample()` to generate a random nucleotide sequence of length 5?

```{r}
sample(x = c("A", "C", "G", "T"), size = 5, replace = T )

```

> Q: Write a function `generate_dna()` that makes a nucleotide sequence of a user specified length

Every function in R has at least three things:

- a **name** (in our case "generate_dna")
- one or more **input arguments** (the length of sequence we want)
- a **body** (that does the work)

```{r}
generate_dna <- function(length=5) {
  sample(x=c("A", "C", "G", "T"), size=length, replace=TRUE)
}
generate_dna(10)
generate_dna(100)

```

> Q: Can you write a `generate protein()` function that returns an amino acid

```{r}
library(bio3d)
aa <- bio3d::aa.table$aa1[1:20]
generate_protein <- function(length=5) {
  sample(x=c(aa), size = length, replace = TRUE)
}
generate_protein()
generate_protein(10)
generate_protein(100)

```

I want my output of this function not to be a vector with one amino acids per element but rather a one element single string .

```{r}
bases <- c("A", "G", "C", "T")
paste(bases, collapse = "")
```

```{r}
library(bio3d)
aa <- bio3d::aa.table$aa1[1:20]
generate_protein <- function(length=5) {
  s<- sample(x=c(aa), size = length, replace = TRUE)
  paste(s, collapse = "")
}
generate_protein()
generate_protein(10)
generate_protein(100)

```

> Q: Generate protein sequences from length 6 to 12

```{r}
generate_protein(length = 6)
generate_protein(length = 7)
generate_protein(length = 8)
```

We can utilize the useful utility function `sapply()` to help us "apply" our function over all the values 6 to 12

```{r}
ans <- sapply(6:12, generate_protein)
ans
```

```{r}
cat( paste(">ID", 6:12, sep = "", "\n", ans, "\n"),sep="")
```

> Q:Are any of these sequences unique in nature - i.e. never found in nature? Utilize "refseq-protein" and look for 100% IDE and 100% coverage mathces with BLASTp Search

Based on my BLAST results, all of my sequences show 100% identity and 100% coverage, which means they are already present in the RefSeq-protein database. This indicates that these sequences are not unique and have been previously documented in nature. If any of my sequences had lower identity or coverage, they might be considered novel, but since they all have perfect matches, they are not unique. 